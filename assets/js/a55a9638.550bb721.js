"use strict";(self.webpackChunkgrants=self.webpackChunkgrants||[]).push([[21867],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(96540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}},59769:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"applications/yatima","title":"Yatima","description":"Team Name:* Yatima Inc.","source":"@site/applications/yatima.md","sourceDirName":"applications","slug":"/applications/yatima","permalink":"/applications/yatima","draft":false,"unlisted":false,"editUrl":"https://github.com/w3f/Grants-Program/edit/master/applications/yatima.md","tags":[],"version":"current","frontMatter":{}}');var s=n(74848),a=n(28453);const r={},l="Yatima",o={},d=[{value:"Project Overview \ud83d\udcc4",id:"project-overview-page_facing_up",level:2},{value:"Overview",id:"overview",level:3},{value:"Project Details",id:"project-details",level:3},{value:"Deliverables",id:"deliverables",level:4},{value:"Ecosystem Fit",id:"ecosystem-fit",level:3},{value:"Team \ud83d\udc65",id:"team-busts_in_silhouette",level:2},{value:"Team members",id:"team-members",level:3},{value:"Contact",id:"contact",level:3},{value:"Legal Structure",id:"legal-structure",level:3},{value:"Team&#39;s experience",id:"teams-experience",level:3},{value:"Team Code Repos",id:"team-code-repos",level:3},{value:"Team LinkedIn Profiles (if available)",id:"team-linkedin-profiles-if-available",level:3},{value:"Development Status \ud83d\udcd6",id:"development-status-open_book",level:2},{value:"Yatima Rust implementation",id:"yatima-rust-implementation",level:3},{value:"Yatima Standard Library",id:"yatima-standard-library",level:3},{value:"Yatima Haskell prototype",id:"yatima-haskell-prototype",level:3},{value:"sp_ipld and sp_im",id:"sp_ipld-and-sp_im",level:3},{value:"Relevant Papers and prior art",id:"relevant-papers-and-prior-art",level:3},{value:"Development Roadmap \ud83d\udd29",id:"development-roadmap-nut_and_bolt",level:2},{value:"Overview",id:"overview-1",level:3},{value:"Milestone 1 - Implement sp_ipld: A Substrate Pallet compatible IPLD library",id:"milestone-1---implement-sp_ipld-a-substrate-pallet-compatible-ipld-library",level:3},{value:"Milestone 2 - Implement sp_im: A Substrate Pallet compatible immutable datastructures library",id:"milestone-2---implement-sp_im-a-substrate-pallet-compatible-immutable-datastructures-library",level:3},{value:"Milestone 3 - Implement sp_yatima: A Substrate Pallet Yatima module",id:"milestone-3---implement-sp_yatima-a-substrate-pallet-yatima-module",level:3},{value:"Future Plans",id:"future-plans",level:2},{value:"Additional Information \u2795",id:"additional-information-heavy_plus_sign",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"yatima",children:"Yatima"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Team Name:"})," ",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima",children:"Yatima Inc"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Payment Address:"})," 3N2bLsFX6UtJ3MXdnVvm87dHaQTPutDiqA"]}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"project-overview-page_facing_up",children:["Project Overview ","\ud83d\udcc4"]}),"\n",(0,s.jsx)(t.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Summary: A lambda-VM and programming language for Substrate chains, with\non-chain formal verification and IPFS package management."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Description: Yatima is a dependently typed functional programming language\nimplemented in Rust featuring substructural types, metaprogramming, and\ncontent addressing via IPFS."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Relevance to Substrate: The language core, including parsing, elaboration,\nserialization/deserialization, typechecking, evaluation, etc. can compile to\nSubstrate compatible WASM (",(0,s.jsx)(t.code,{children:"no_std"})," via Substrate's ",(0,s.jsxs)(t.a,{href:"https://docs.rs/sp-std/3.0.0/sp_std/index.html",children:[(0,s.jsx)(t.code,{children:"sp_std"})," standard library"]}),"), and thus can be\nutilized within a Substrate Pallet."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Our interest: In order for decentralized technologies to gain widespread\nadoption, users have to trust that the infrastructure they are using is safe,\nand that they are not just replacing counterparty risk with technical risk. We\nbelieve that functional programming and formal proofs offer a possible path\ntowards increasing the safety and reliability of all software, not just in\nblockchain."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"project-details",children:"Project Details"}),"\n",(0,s.jsxs)(t.p,{children:["Many blockchain projects are exploring strongly-typed functional programming as\na paradigm for writing smart contracts and DApps. Examples include ",(0,s.jsx)(t.a,{href:"https://developers.cardano.org/en/programming-languages/plutus/overview/",children:"Cardano's\nPlutus"}),", ",(0,s.jsx)(t.a,{href:"https://wiki.tezosagora.org/learn/smartcontracts/michelson",children:"Tezos' Michelson"}),", ",(0,s.jsx)(t.a,{href:"https://github.com/kadena-io/pact",children:"Kadena's Pact"})," and ",(0,s.jsx)(t.a,{href:"https://daml.com/",children:"Digital Asset's DAML"}),". The type safety and\ncomposability of functional programs make them an exciting option for\nwriting high-assurance smart contracts."]}),"\n",(0,s.jsxs)(t.p,{children:["Yatima aims to help develop the functional programming ecosystem on Substrate\nand the Polkadot ecosystem. We have developed a graph-based runtime for the Yatima language\nwith fully lazy evaluation, sharing, and whole program optimization. This runtime could also\nbe targeted by other functional languages. The Yatima runtime is\nsimilar in many respects to Haskell Core, or the ",(0,s.jsx)(t.a,{href:"https://grin-compiler.github.io/",children:"GRIN\nIR"})," but is implemented in deterministic\n",(0,s.jsx)(t.code,{children:"no_std"})," Rust, which allows it to run virtually anywhere, including the web,\nWASM blockchains, or even embedded systems (in theory)."]}),"\n",(0,s.jsx)(t.p,{children:"Yatima also implements a powerful dependent and substructural type-system,\nsimilar to Idris 2. This enables formal verification and theorem proving\n(although crucial features for practical proving such as inference and tactics\nare not yet implemented). Proofs allow for many useful optimizations in the area\nof smart contracts, such as static detection of arithmetic overflow or division\nby zero errors, or tracking of resources and permissions via an effect system.\nFurthermore, since Yatima can be implemented in itself, there is a possiblity of\nhaving on-chain trustless proof verification."}),"\n",(0,s.jsx)(t.p,{children:"Lastly, Yatima implements content-addressing, allowing all programs and packages\nto be serialized into IPLD objects and shared over the peer-to-peer IPFS network\n(or via libp2p)."}),"\n",(0,s.jsx)(t.h4,{id:"deliverables",children:"Deliverables"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"sp_ipld"})," crate for interacting with IPFS CID, Multihash and IPLD based on\n",(0,s.jsx)(t.a,{href:"https://github.com/ipfs-rust/libipld",children:(0,s.jsx)(t.code,{children:"ipfs-rust/libipld"})}),", but which is\nSubstrate pallet compatible. This is a necessary dependency for Yatima Core,\nbut is an independent deliverable that could be useful for many other\nSubstrate projects."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"sp_im"})," crate for creating immutable datastructures, based on\n",(0,s.jsx)(t.a,{href:"https://github.com/bodil/im-rs",children:(0,s.jsx)(t.code,{children:"bodil/im-rs"})}),", but which is\nSubstrate pallet compatible. This is a necessary dependency for Yatima Core,\nbut is an independent deliverable that could be useful for many other\nSubstrate projects."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"sp_yatima"})," crate integrated with ",(0,s.jsx)(t.code,{children:"sp_ipld"}),", ",(0,s.jsx)(t.code,{children:"sp_im"})," and ",(0,s.jsx)(t.code,{children:"sp_std"})," that\npackages the ",(0,s.jsx)(t.code,{children:"yatima_core"}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima/tree/main/core",children:"crate"})," and a\n",(0,s.jsx)(t.code,{children:"yatima-node"})," repository based on the\n",(0,s.jsx)(t.a,{href:"https://github.com/substrate-developer-hub/substrate-node-template",children:(0,s.jsx)(t.code,{children:"substrate-node-template"})}),"\nshowcasing how ",(0,s.jsx)(t.code,{children:"sp_yatima"})," can be imported into a Substrate Node as a pallet."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["This proposal does ",(0,s.jsx)(t.em,{children:"not"})," include in its scope:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Implementing a smart contract eDSL in Yatima."}),"\n",(0,s.jsxs)(t.li,{children:['Integrating "effectful" features like contract deployment, calling or\ncompatiblity with ',(0,s.jsx)(t.code,{children:"pallet_contracts"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"We would plan to propose the above for follow-up work upon satisfactory\ncompletion of the above deliverables."}),"\n",(0,s.jsx)(t.h3,{id:"ecosystem-fit",children:"Ecosystem Fit"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Where and how does your project fit into the ecosystem?"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Yatima fits into the Substrate ecosystem in a few ways:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"The runtime can be used like a functional VM that could potentially be targeted by a\nvariety of other functional programming languages, including Plutus, Pact,\nSimplicity, etc."}),"\n",(0,s.jsxs)(t.li,{children:["The Yatima language itself can be called from within Rust, and potentially\ncan integrate with ",(0,s.jsx)(t.code,{children:"ink"})," as a kind of lightweight functional evaluator or\ngarbage collector for pure expressions, with ",(0,s.jsx)(t.code,{children:"ink"})," or ",(0,s.jsx)(t.code,{children:"pallet_contracts"}),"\nhandling calling conventions and effects. This would be similar to the\nrelationship between JS and WASM on the web."]}),"\n",(0,s.jsx)(t.li,{children:"The Yatima typechecker can be embedded in a contract and exposed as an\non-chain verifier or prover."}),"\n",(0,s.jsx)(t.li,{children:"In the future, Yatima could handle effects and contract calls itself,\nand can become a fully viable smart contract language."}),"\n",(0,s.jsx)(t.li,{children:"Eventually there could be Yatima-based parachains with entirely different\nmodels for how smart contracts should interact."}),"\n"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Who is your target audience (parachain/dapp/wallet/UI developers, designers, your own user base, some dapp's userbase, yourself)?"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Our target audience is smart contract and parachain developers."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"What need(s) does your project meet?"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:'One of the strengths of a heterogeneous blockchain ecosystem like Substrate /\nPolkadot / Kusama ecosystem is the ability for radically different approaches to\ncoexist and provide value to one another. Other systems have more of a\nrequirement for a single execution environment. So while in the long run we hope\nto execute on our ambition of "better living through FP", even in the short run\nthe existence of an interoperable FP option will showcase one of the key\nSubstrate innovations in this space.'}),"\n",(0,s.jsxs)(t.p,{children:["Additionally, Yatima is designed in a modular way, so that different components\nand dependencies can provide value to other projects, such as ",(0,s.jsx)(t.code,{children:"sp_im"}),", ",(0,s.jsx)(t.code,{children:"sp_ipld"})," libraries,\nor the graph-reduction runtime."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Are there any other projects similar to yours in the Substrate / Polkadot / Kusama ecosystem?"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If so, how is your project different?"}),"\n",(0,s.jsx)(t.li,{children:"If not, are there similar projects in related ecosystems?"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"I am not aware of similar projects in the Substrate ecosystem but would be\nexcited to connect with anyone doing something related!"}),"\n",(0,s.jsx)(t.p,{children:"In other ecosystems projects with some degree of overlap are:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://developers.cardano.org/en/programming-languages/plutus/overview/",children:"Plutus"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/idris-lang/Idris2",children:"Idris2"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/kadena-io/pact",children:"Pact"})}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/uwu-tech/Kind",children:"Kind"})," (formerly Formality)"]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.unisonweb.org/",children:"Unison"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"team-busts_in_silhouette",children:["Team ","\ud83d\udc65"]}),"\n",(0,s.jsx)(t.h3,{id:"team-members",children:"Team members"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Name of team leader: John Burnham"}),"\n",(0,s.jsxs)(t.li,{children:["Names of team members","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Gabriel Barreto"}),"\n",(0,s.jsx)(t.li,{children:"Anders Sorby"}),"\n",(0,s.jsx)(t.li,{children:"Sam Burnham"}),"\n",(0,s.jsx)(t.li,{children:"Caden Haustein"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"contact",children:"Contact"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Contact Name:"})," John Burnham"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Contact Email:"})," ",(0,s.jsx)(t.a,{href:"mailto:john@yatima.io",children:"john@yatima.io"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Website:"})," ",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima",children:"https://github.com/yatima-inc/yatima"})]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"legal-structure",children:"Legal Structure"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Registered Address:"})," 118 Parker St, Newton MA 02459, USA"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Registered Legal Entity:"})," Yatima Inc."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"teams-experience",children:"Team's experience"}),"\n",(0,s.jsxs)(t.p,{children:["John and Gabriel have been working on designing functional programming languages\ntogether for over 2 years and previously coauthored the Formality language,\nwhich was supported by an Ethereum Foundation Grant (which John presented on at ",(0,s.jsx)(t.a,{href:"https://www.youtube.com/watch?v=3XUKQX4nN8w",children:"Devcon5"}),")"]}),"\n",(0,s.jsxs)(t.p,{children:["Prior to that, John worked on Tezos where he created and led initial development\nof the ",(0,s.jsx)(t.a,{href:"https://gitlab.com/morley-framework",children:"Morley Framework"}),", as well as\ncreating the ",(0,s.jsx)(t.a,{href:"https://gitlab.com/tzip/tzip/-/blob/master/proposals/tzip-1/tzip-1.md",children:"TZIP standards process"}),".\nBefore that, John cofounded tlon.io. He was a Thiel Fellow in 2011 and dropped out of\nDartmouth College."]}),"\n",(0,s.jsx)(t.p,{children:'Gabriel previously worked at the Ethereum Foundation and received his Master in\nMath at the Federal University of Bahia (Salvador, Brazil), where his\ndissertation was titled "On the Category of Deductive Systems".'}),"\n",(0,s.jsx)(t.p,{children:"Anders is a full stack and machine learning engineer by background, and\nreceived his Masters in Applied Physics and Mathematics from the Norwegian\nInstitute of Science and Technology."}),"\n",(0,s.jsx)(t.p,{children:"Sam recently graduated from the Rensselaer Polytechnic Institute with a degree\nin Computer Engineering. He has previously worked on embedded systems in Rust\nand C including industrial HVAC controllers at enverid.com."}),"\n",(0,s.jsxs)(t.p,{children:["Caden is the creator of the ",(0,s.jsx)(t.a,{href:"https://github.com/mlatu-lang/mlatu",children:"mlatu functional concatenative programming\nlanguage"}),". He is interning at Yatima Inc\nfor the summer."]}),"\n",(0,s.jsx)(t.h3,{id:"team-code-repos",children:"Team Code Repos"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc",children:"https://github.com/yatima-inc"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima",children:"https://github.com/yatima-inc/yatima"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/introit",children:"https://github.com/yatima-inc/introit"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/sp-ipld",children:"https://github.com/yatima-inc/sp-ipld"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima-haskell-prototype",children:"https://github.com/yatima-inc/yatima-haskell-prototype"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Please also provide the GitHub accounts of all team members. If they contain no activity, references to projects hosted elsewhere or live are also fine."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/johnchandlerburnham",children:"https://github.com/johnchandlerburnham"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/gabriel-barrett",children:"https://github.com/gabriel-barrett"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/Anderssorby",children:"https://github.com/Anderssorby"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/samuelburnham",children:"https://github.com/samuelburnham"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/brightly-salty",children:"https://github.com/brightly-salty"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"team-linkedin-profiles-if-available",children:"Team LinkedIn Profiles (if available)"}),"\n",(0,s.jsxs)(t.p,{children:["Please email ",(0,s.jsx)(t.a,{href:"mailto:john@yatima.io",children:"john@yatima.io"})," for team member CVs."]}),"\n",(0,s.jsxs)(t.h2,{id:"development-status-open_book",children:["Development Status ","\ud83d\udcd6"]}),"\n",(0,s.jsx)(t.h3,{id:"yatima-rust-implementation",children:"Yatima Rust implementation"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima",children:"https://github.com/yatima-inc/yatima"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The language is still pre-alpha, but is rapidly nearing it's first numbered\nalpha version. A brief overview of the current state of the implementation:"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima/tree/main/core",children:(0,s.jsx)(t.code,{children:"core"})})," subcrate\ncontains the deterministic ",(0,s.jsx)(t.code,{children:"no_std"})," language core:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"nom parsers for the core syntax"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"A Rust quasiquotation macro that allows yatima to be used as a functional\neDSL directly in Rust. We implement much of the type-system this way."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"a typedef syntax sugar for generating raw core self-type lambda-encoded\ndatatypes. The syntax:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"type List (A: Type) {\n  Nil\n  Cons A (List A)\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Is actually non primitive and generates the raw terms:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"def List : \u2200 (0 A: Type) -> Type\n  = \u03bb A => @List.self \u2200\n    (0 P: \u2200 (self: (List) A) -> Type)\n    (& Nil: P (data \u03bb P List.Nil List.Cons => List.Nil))\n    (& Cons: \u2200 (_: A) (_: (List) A)\n      -> P (data \u03bb P List.Nil List.Cons => List.Cons _ _))\n  -> P List.self\n\ndef List.Nil : \u2200 (0 A: Type) -> List A\n  = \u03bb A => data \u03bb P List.Nil List.Cons => List.Nil\n\ndef List.Cons : \u2200 (0 A: Type) (_: A) (_: List A) -> List A\n  = \u03bb A _ _ => data \u03bb P List.Nil List.Cons => List.Cons _ _\n"})}),"\n",(0,s.jsx)(t.p,{children:"This lambda encoding construction is too arcane to be user-facing, even in\nthe core language, but it is extremely powerful on a theory level, and is\nwhat allows Yatima to implement dependent types in a fraction of the\ncode length of e.g. the language core of Idris2."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["the \u03bb-DAG based evaluator, with a typechecking version and a runtime\nversion (where non-runtime relevant type information is erased). This uses\nextensive ",(0,s.jsx)(t.code,{children:"unsafe"})," Rust due its heavy use of raw-pointers, doubly-linked-lists\n(",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima/blob/main/core/src/dll.rs",children:(0,s.jsx)(t.code,{children:"core/dll.rs"})}),")."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The serialization system to embed Yatima terms, definitions and packages into\n",(0,s.jsx)(t.a,{href:"ipld.io",children:"IPLD"}),". The system is compatible with the ",(0,s.jsx)(t.code,{children:"go-ipfs"})," reference\nimplementation so that content-ids (CIDs) computed by the ",(0,s.jsx)(t.code,{children:"core"})," match the\nCIDs once an object is uploaded to ipfs"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Exposed Rust primitive and operations, such as signed and unsigned ints,\nBigInt, Text (from our fork of\n",(0,s.jsx)(t.a,{href:"https://docs.rs/ropey/1.3.0/ropey/index.html",children:(0,s.jsx)(t.code,{children:"ropey"})})," rather than String)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima/tree/main/utils/src",children:(0,s.jsx)(t.code,{children:"utils"})})," subcrate\ncontains the REPL, the file parser, the ipfs client, and other pieces of\ninfrastructure that cannot be ",(0,s.jsx)(t.code,{children:"no_std"}),". Our vision is that different platforms\nwill have different implementations of this ",(0,s.jsx)(t.code,{children:"utils"})," crate."]}),"\n",(0,s.jsxs)(t.p,{children:["We currently have ",(0,s.jsx)(t.code,{children:"sp_im"})," and ",(0,s.jsx)(t.code,{children:"sp_ipld"})," subcrates for our ports of the ",(0,s.jsx)(t.code,{children:"im"}),"\nand ",(0,s.jsx)(t.code,{children:"libipld"})," libraries to a ",(0,s.jsx)(t.code,{children:"no_std + sp_std"})," setting. These are currently\nbeing factored out into their own repositories."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima/tree/main/web",children:(0,s.jsx)(t.code,{children:"web"})})," subcrate\ncontains a very rough prototype of a web repl."]}),"\n",(0,s.jsx)(t.h3,{id:"yatima-standard-library",children:"Yatima Standard Library"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/introit",children:"https://github.com/yatima-inc/introit"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The Yatima standard library is in its early stages, but contains definitions for\na variety of different datatypes, such as ",(0,s.jsx)(t.code,{children:"vector"}),", ",(0,s.jsx)(t.code,{children:"b_tree"}),", preliminary work\non theorem proving structures like a propositional equality type\n(",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/introit/blob/main/equal.ya",children:"equal.ya"}),"), as well\nas a bare-bones port of the Haskell ",(0,s.jsx)(t.code,{children:"megaparsec"})," parser combinator library\n(",(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/introit/blob/main/parsec.ya",children:"parsec.ya"}),")."]}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.code,{children:"vector.ya"})," we can see an example of using proofs to show that we can always\ntake the head of a non-empty ",(0,s.jsx)(t.code,{children:"Vector"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"type Vector (A: Type): \u2200 (\u03c9 k: Natural) -> Type {\n   Nil: Vector A Natural.Z,\n   Cons (0 k: Natural) (x: A) (xs: Vector A k): Vector A (Natural.S k),\n}\n\ndef Vector.head (0 A: Type) (k: Natural) (a : Vector A (Natural.S k)): A\n  = ((case a) (\u03bb k' self => \u2200 (Equal Natural (Natural.S k) k') -> A)\n    (\u03bb e => Empty.absurd A (Natural.Z_isnt_S k e))\n    (\u03bb k x xs e => x))\n    (Equal.Refl Natural (Natural.S k))\n"})}),"\n",(0,s.jsx)(t.p,{children:"The parser library is particulary interesting due the combination of dependent\ntypes with parsers allowing for lifting of parse errors to type errors, and thus\nallowing for metaprogramming constructs or macros to be defined directly in the\nYatima base language:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\u2144 Parser.parsed Char (Parser.char 'f') \"f\"\n'f'\n: Parsed Char (Parser.run Char (Parser.char 'f') (State.init \"f\"))\n\u2144 Char.eql 'f' (Parser.parsed Char (Parser.char 'f') \"f\")\n#Bool.true\n: Bool\n\u2144 Char.eql 'f' (Parser.parsed Char (Parser.char 'f') \"a\")\nType Error: Type Mismatch from 1:15 to 1:55 in bafk2bzacectxsdnlokzhsmqxklxxc2qmhhz4hro2wh7dmsx6lwmqdv4xwwq4m\n\u2022 Expected: #Char\n\u2022 Detected: ...\n"})}),"\n",(0,s.jsx)(t.h3,{id:"yatima-haskell-prototype",children:"Yatima Haskell prototype"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/yatima-haskell-prototype",children:"https://github.com/yatima-inc/yatima-haskell-prototype"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This is an early experimental version of the language built to test ideas\naround combining self-types with Quantitative Type Theory, and whether the\ncontent addressing with IPFS was viable in that context. We include it here to\nillustrate how a language like Yatima can be built in an existing functional\nlanguage (with its own runtime), using higher-order abstract syntax (HOAS).\nThis is how we plan to implement Yatima in itself once the language is more\nmature."}),"\n",(0,s.jsx)(t.h3,{id:"sp_ipld-and-sp_im",children:"sp_ipld and sp_im"}),"\n",(0,s.jsxs)(t.p,{children:["We have prototypes of the ",(0,s.jsx)(t.code,{children:"sp_ipld"})," and ",(0,s.jsx)(t.code,{children:"sp_im"})," repositories here:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/sp-ipld",children:"https://github.com/yatima-inc/sp-ipld"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yatima-inc/sp-im",children:"https://github.com/yatima-inc/sp-im"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["These have some initial functionality, but are lacking significant features,\ntest-coverage, and documentation. However, what exists is sufficient to\ndemonstrate that these libraries can be built in a ",(0,s.jsx)(t.code,{children:"no_std"})," context using the\n",(0,s.jsx)(t.code,{children:"sp_std"})," library."]}),"\n",(0,s.jsx)(t.h3,{id:"relevant-papers-and-prior-art",children:"Relevant Papers and prior art"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Yatima's core reduction machine is based on the \u03bb-DAG technique described in\n",(0,s.jsx)(t.a,{href:"https://www.ccs.neu.edu/home/wand/papers/shivers-wand-10.pdf",children:"Bottom-up \u03b2-reduction"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Yatima's approach to inductive datatypes is based on ",(0,s.jsx)(t.a,{href:"https://homepage.divms.uiowa.edu/~astump/papers/fu-stump-rta-tlca-14.pdf",children:"Self Types for Dependently Typed Lambda Encodings"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Yatima's quantitative types are based on ",(0,s.jsx)(t.a,{href:"https://bentnib.org/quantitative-type-theory.pdf",children:"Syntax and Semantics of Quantitative Type Theory"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Many aspects of the language, particularly its libraries and type-equality\nalgorithm, are adapted from the authors' previous work on ",(0,s.jsx)(t.a,{href:"https://github.com/moonad/Formality-tmp",children:"The Formality proof language"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"development-roadmap-nut_and_bolt",children:["Development Roadmap ","\ud83d\udd29"]}),"\n",(0,s.jsx)(t.h3,{id:"overview-1",children:"Overview"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Total Estimated Duration:"})," 3 months"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Full-Time Equivalent (FTE):"})," 4"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Total Costs:"})," 29,999 USD"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"milestone-1---implement-sp_ipld-a-substrate-pallet-compatible-ipld-library",children:"Milestone 1 - Implement sp_ipld: A Substrate Pallet compatible IPLD library"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Estimated duration:"})," 3 weeks"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"FTE:"}),"  2"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Costs:"})," 7,500 USD"]}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Number"}),(0,s.jsx)(t.th,{children:"Deliverable"}),(0,s.jsx)(t.th,{children:"Specification"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0a."}),(0,s.jsx)(t.td,{children:"License"}),(0,s.jsx)(t.td,{children:"MIT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0b."}),(0,s.jsx)(t.td,{children:"Documentation"}),(0,s.jsxs)(t.td,{children:["We will enhance inline documentation, and write a tutorial on how to import and use ",(0,s.jsx)(t.code,{children:"sp_ipld"})," in Substrate."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0c."}),(0,s.jsx)(t.td,{children:"Testing Guide"}),(0,s.jsxs)(t.td,{children:["We will extend existing ",(0,s.jsx)(t.code,{children:"libipld"})," unit tests with more coverage, add ",(0,s.jsx)(t.code,{children:"quickcheck"})," property tests and integration tests with ",(0,s.jsx)(t.code,{children:"go-ipfs"})," for ensuring CID compatibility"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0d."}),(0,s.jsx)(t.td,{children:"Nix"}),(0,s.jsx)(t.td,{children:"We will provide a .nix expression which can immutably build this crate and all tests"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1a."}),(0,s.jsxs)(t.td,{children:["Substrate module: ",(0,s.jsx)(t.code,{children:"sp_ipld"})]}),(0,s.jsxs)(t.td,{children:["We will create a Substrate module based on ",(0,s.jsx)(t.code,{children:"ipfs-rust/ipld"})," that will allow for serializing and deserializing IPLD objects via the ",(0,s.jsx)(t.code,{children:"dag-cbor"})," codec and computing IPFS CIDs which are compatible with ",(0,s.jsx)(t.code,{children:"go-ipfs"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1b."}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"dag-json"})," feature"]}),(0,s.jsxs)(t.td,{children:["We will implement the ",(0,s.jsx)(t.code,{children:"dag-json"})," codec for the ",(0,s.jsx)(t.code,{children:"sp_ipld"})," module, as well as a textual JSON format"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1c."}),(0,s.jsxs)(t.td,{children:["Substrate module: ",(0,s.jsx)(t.code,{children:"sp_cid"})]}),(0,s.jsxs)(t.td,{children:["We will implement a documented ",(0,s.jsx)(t.code,{children:"no_std"})," version of the ",(0,s.jsx)(t.code,{children:"ipfs-rust/ipld"})," dependency ",(0,s.jsx)(t.code,{children:"multiformats/cid"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1d."}),(0,s.jsxs)(t.td,{children:["Substrate module: ",(0,s.jsx)(t.code,{children:"sp_multihash"})]}),(0,s.jsxs)(t.td,{children:["We will implement a documented ",(0,s.jsx)(t.code,{children:"no_std"})," version of the ",(0,s.jsx)(t.code,{children:"ipfs-rust/ipld"})," dependency ",(0,s.jsx)(t.code,{children:"multiformats/rust-multihash"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1e."}),(0,s.jsxs)(t.td,{children:["Substrate module: ",(0,s.jsx)(t.code,{children:"bytecursor"})]}),(0,s.jsxs)(t.td,{children:["We will implement a documented ",(0,s.jsx)(t.code,{children:"no_std"})," drop-in replacement library for the ",(0,s.jsx)(t.code,{children:"std::io::Read"})," ",(0,s.jsx)(t.code,{children:"std::io::Write"})," based serialization/deserialization functions used by ",(0,s.jsx)(t.code,{children:"ipfs-rust/ipld"})]})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"milestone-2---implement-sp_im-a-substrate-pallet-compatible-immutable-datastructures-library",children:"Milestone 2 - Implement sp_im: A Substrate Pallet compatible immutable datastructures library"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Estimated duration:"})," 3 weeks"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"FTE:"}),"  2"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Costs:"})," 7,500 USD"]}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Number"}),(0,s.jsx)(t.th,{children:"Deliverable"}),(0,s.jsx)(t.th,{children:"Specification"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0a."}),(0,s.jsx)(t.td,{children:"License"}),(0,s.jsx)(t.td,{children:"MIT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0b."}),(0,s.jsx)(t.td,{children:"Documentation"}),(0,s.jsxs)(t.td,{children:["We will enhance inline documentation, and write a tutorial on how to import and use ",(0,s.jsx)(t.code,{children:"sp_im"})," in Substrate."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0c."}),(0,s.jsx)(t.td,{children:"Testing Guide"}),(0,s.jsxs)(t.td,{children:["We will port existing ",(0,s.jsx)(t.code,{children:"im"})," tests to ",(0,s.jsx)(t.code,{children:"quickcheck"}),", and add additional unit tests where appropriate"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0d."}),(0,s.jsx)(t.td,{children:"Nix"}),(0,s.jsx)(t.td,{children:"We will provide a .nix expression which can immutably build this crate and all tests"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1."}),(0,s.jsxs)(t.td,{children:["Substrate module: ",(0,s.jsx)(t.code,{children:"sp_im"})]}),(0,s.jsx)(t.td,{children:"We will create a Substrate module that will allow for creating and manipulating performant immutable datastructures such as cons-lists, vectors based on rrb trees and maps/sets based on btrees"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"milestone-3---implement-sp_yatima-a-substrate-pallet-yatima-module",children:"Milestone 3 - Implement sp_yatima: A Substrate Pallet Yatima module"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Estimated Duration:"})," 6 weeks"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"FTE:"}),"  2"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Costs:"})," 14,999 USD"]}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Number"}),(0,s.jsx)(t.th,{children:"Deliverable"}),(0,s.jsx)(t.th,{children:"Specification"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0a."}),(0,s.jsx)(t.td,{children:"License"}),(0,s.jsx)(t.td,{children:"MIT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0b."}),(0,s.jsx)(t.td,{children:"Documentation"}),(0,s.jsxs)(t.td,{children:["We will provide inline documentation, write a tutorial on the language itself, and a tutorial to import and use ",(0,s.jsx)(t.code,{children:"sp_yatima"})," in Substrate."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0c."}),(0,s.jsx)(t.td,{children:"Testing Guide"}),(0,s.jsx)(t.td,{children:"We will extend existing unit, property and integration tests where appropriate."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0d."}),(0,s.jsx)(t.td,{children:"Nix"}),(0,s.jsx)(t.td,{children:"We will provide a .nix expression which can immutably build this crate and all tests"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1."}),(0,s.jsxs)(t.td,{children:["Substrate module: ",(0,s.jsx)(t.code,{children:"sp_yatima"})]}),(0,s.jsx)(t.td,{children:"We will create a Substrate module that will allow for parsing, typechecking and evaluating Yatima language expressions"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"2."}),(0,s.jsxs)(t.td,{children:["Repository: ",(0,s.jsx)(t.code,{children:"yatima-node"})]}),(0,s.jsxs)(t.td,{children:["We will create a fork of the ",(0,s.jsx)(t.code,{children:"substrate-node-template"})," that imports ",(0,s.jsx)(t.code,{children:"sp_yatima"})]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"future-plans",children:"Future Plans"}),"\n",(0,s.jsx)(t.p,{children:"If this initial project is successful, we plan to apply for a follow-up grant to\nadd side-effects and smart contract eDSL features to Yatima. We would like\nYatima to be an option for developers who wish to use functional programming to\ndevelop smart contracts."}),"\n",(0,s.jsx)(t.p,{children:"We also intend to implement a Substrate chain using the Yatima runtime, and to\nexplore the possibility of integrating with Kusama and Polkadot via a bridge,\nparathread or parachain."}),"\n",(0,s.jsxs)(t.p,{children:["Additionally, we would like to explore other applications of Yatima, including\ndeveloping the web environment further, and exploring frontend application\ndevelopment, possibly via a model like ",(0,s.jsx)(t.a,{href:"https://seed-rs.org/",children:"https://seed-rs.org/"}),". Another possible\narea of exploration would be to integrate with the ",(0,s.jsx)(t.a,{href:"https://github.com/lunatic-solutions/lunatic",children:"lunatic\nruntime"}),", which uses WASM modules\nto provide Erlang style lightweight processes (green threads). There is some\nindication that content addressing is a good fit for this, given the work Unison\nhas done on distributed systems."]}),"\n",(0,s.jsxs)(t.h2,{id:"additional-information-heavy_plus_sign",children:["Additional Information ","\u2795"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"How did you hear about the Grants Program?"})," Web3 Foundation Website"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Whether there are any other teams who have already contributed (financially) to the project."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Previous work on Yatima and predecessor projects has been supported by grants\nfrom the Ethereum Foundation and the IOTA Foundation."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);