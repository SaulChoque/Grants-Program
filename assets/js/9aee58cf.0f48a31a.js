"use strict";(self.webpackChunkgrants=self.webpackChunkgrants||[]).push([[515],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}},99916:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"applications/CILA-omnichain-infrastructure","title":"CILA - Omnichain Infrastructure","description":"- Team Name: Collective Intelligence Labs","source":"@site/applications/CILA-omnichain-infrastructure.md","sourceDirName":"applications","slug":"/applications/CILA-omnichain-infrastructure","permalink":"/applications/CILA-omnichain-infrastructure","draft":false,"unlisted":false,"editUrl":"https://github.com/w3f/Grants-Program/edit/master/applications/CILA-omnichain-infrastructure.md","tags":[],"version":"current","frontMatter":{}}');var s=n(74848),r=n(28453);const a={},o="CILA - Omnichain Infrastructure",l={},d=[{value:"Project Overview \ud83d\udcc4",id:"project-overview-page_facing_up",level:2},{value:"Overview",id:"overview",level:3},{value:"Introduction",id:"introduction",level:3},{value:"Implementation",id:"implementation",level:3},{value:"Protobuf support on-chain",id:"protobuf-support-on-chain",level:4},{value:"Aggregate Repository",id:"aggregate-repository",level:4},{value:"Event Store",id:"event-store",level:4},{value:"Command/operations Dispatcher",id:"commandoperations-dispatcher",level:4},{value:"Events Emitter",id:"events-emitter",level:4},{value:"Conclusion",id:"conclusion",level:2},{value:"\ud83d\ude80 Technology Stack",id:"-technology-stack",level:2},{value:"Usage",id:"usage",level:2},{value:"Benefits",id:"benefits",level:2},{value:"Conclusion",id:"conclusion-1",level:2},{value:"Description",id:"description",level:2},{value:"Implementation",id:"implementation-1",level:2},{value:"Features",id:"features",level:2},{value:"Benefits",id:"benefits-1",level:2},{value:"Conclusion",id:"conclusion-2",level:2},{value:"Overview",id:"overview-1",level:2},{value:"Implementation",id:"implementation-2",level:2},{value:"Conclusion",id:"conclusion-3",level:2},{value:"Description",id:"description-1",level:2},{value:"Implementation",id:"implementation-3",level:2},{value:"Internal state",id:"internal-state",level:3},{value:"Command handling",id:"command-handling",level:3},{value:"Event sourcing",id:"event-sourcing",level:3},{value:"Snapshotting",id:"snapshotting",level:3},{value:"Conclusion",id:"conclusion-4",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Diagramm",id:"diagramm",level:2},{value:"Domain",id:"domain",level:2},{value:"Aggregate",id:"aggregate-1",level:3},{value:"<code>AggregateState</code>",id:"aggregatestate-1",level:4},{value:"Methods",id:"methods-1",level:5},{value:"<code>DomainEvent</code>",id:"domainevent",level:4},{value:"Methods",id:"methods-2",level:5},{value:"<code>DomainEventType</code>",id:"domaineventtype",level:4},{value:"Variants",id:"variants",level:5},{value:"Entities",id:"entities",level:3},{value:"<code>NFT</code>",id:"nft",level:4},{value:"Fields",id:"fields",level:5},{value:"Methods",id:"methods-3",level:5},{value:"Application",id:"application",level:2},{value:"Command",id:"command",level:3},{value:"<code>Command</code>",id:"command-1",level:4},{value:"Fields",id:"fields-1",level:5},{value:"Methods",id:"methods-4",level:5},{value:"<code>CommandType</code>",id:"commandtype",level:4},{value:"Variants",id:"variants-1",level:5},{value:"Service",id:"service",level:3},{value:"<code>CommandDispatcher</code>",id:"commanddispatcher",level:4},{value:"Methods",id:"methods-5",level:5},{value:"<code>NFTService</code>",id:"nftservice",level:4},{value:"Fields",id:"fields-2",level:5},{value:"Methods",id:"methods-6",level:5},{value:"Event",id:"event",level:3},{value:"<code>DomainEventType</code>",id:"domaineventtype-1",level:4},{value:"Variants",id:"variants-2",level:5},{value:"<code>DomainEvent</code>",id:"domainevent-1",level:4},{value:"Fields",id:"fields-3",level:5},{value:"Methods",id:"methods-7",level:5},{value:"Store",id:"store",level:3},{value:"<code>AggregateRepository</code>",id:"aggregaterepository",level:4},{value:"Fields",id:"fields-4",level:5},{value:"Methods",id:"methods-8",level:5},{value:"Team \ud83e\uddbe",id:"team-",level:2},{value:"Team members",id:"team-members",level:3},{value:"Contact",id:"contact",level:3},{value:"Legal Structure",id:"legal-structure",level:3},{value:"Team&#39;s experience",id:"teams-experience",level:3},{value:"Team Code Repos",id:"team-code-repos",level:3},{value:"Team GitHub Profiles",id:"team-github-profiles",level:3},{value:"Team LinkedIn Profiles",id:"team-linkedin-profiles",level:3},{value:"Development Status \ud83d\udcd6",id:"development-status-open_book",level:2},{value:"Development Roadmap \ud83d\udd29",id:"development-roadmap-nut_and_bolt",level:2},{value:"Overview",id:"overview-2",level:3},{value:"Milestone 1 \u2014 Design and Implementation",id:"milestone-1--design-and-implementation",level:3},{value:"Milestone 2 \u2014 Testing and Documentation",id:"milestone-2--testing-and-documentation",level:3},{value:"Milestone 3 \u2014 Example Smart Contracts and Enhancements",id:"milestone-3--example-smart-contracts-and-enhancements",level:3},{value:"Future Plans",id:"future-plans",level:2},{value:"Additional Information \u2795",id:"additional-information-heavy_plus_sign",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"cila---omnichain-infrastructure",children:"CILA - Omnichain Infrastructure"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Team Name:"})," Collective Intelligence Labs"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Payment Address:"}),"  bc1qff0kjc6pyjkneyt3pctm5nahjpd9f774avz55x (BTC)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Level:"})," 2"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Status:"})," ",(0,s.jsx)(t.a,{href:"https://github.com/w3f/Grants-Program/pull/1679#issuecomment-1823419675",children:"Terminated"})]}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"project-overview-page_facing_up",children:["Project Overview ","\ud83d\udcc4"]}),"\n",(0,s.jsx)(t.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(t.p,{children:"The goal of this project is to implement an omnichain smart contract infrastructure support for Substrate framework. \ud83c\udf10\ud83e\udd16 This will include the implementation of CQRS + Event Sourcing execution environment plus an example smart-contract. The implementation will be done using WASM and/or native Rust Substrate implementation as a pallet. The implementation will include implementing Protobuf support on-chain, serialization/deserialization, aggregated repository, event store, command/operations dispatcher, and events emitter. \ud83d\udee0\ufe0f\ud83d\udc68\u200d\ud83d\udcbb"}),"\n",(0,s.jsx)(t.h3,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"This project aims to add an omnichain smart contract infrastructure support for Substrate framework by implementing a CQRS + Event Sourcing execution environment. CQRS (Command Query Responsibility Segregation) is a design pattern that separates the command and query responsibilities of an application. Event Sourcing is a design pattern that represents the state of an application as a series of events that are stored in an event store. \ud83e\uddec\ud83d\udcbb"}),"\n",(0,s.jsx)(t.h3,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(t.p,{children:"The implementation of the omnichain smart contract infrastructure will be done using WASM and/or native Rust Substrate implementation as a pallet. The implementation will include the following components:"}),"\n",(0,s.jsx)(t.h4,{id:"protobuf-support-on-chain",children:"Protobuf support on-chain"}),"\n",(0,s.jsx)(t.p,{children:"Protobuf is a language-agnostic binary serialization format that allows developers to define structured data schemas. The implementation will include support for Protobuf on-chain, which will enable developers to define smart contract interfaces using Protobuf. \ud83e\udd16\ud83d\udcbe"}),"\n",(0,s.jsx)(t.h4,{id:"aggregate-repository",children:"Aggregate Repository"}),"\n",(0,s.jsx)(t.p,{children:"Aggregate Repository is a data storage module that manages the state and storage of aggregate objects. It provides methods for creating, reading, updating, and deleting aggregates. \ud83d\udcc8\ud83d\udcca"}),"\n",(0,s.jsx)(t.h4,{id:"event-store",children:"Event Store"}),"\n",(0,s.jsx)(t.p,{children:"An event store is a database that stores events in the order they occurred. The implementation will include an event store, which will store all the events generated by the smart contract. \ud83d\uddc2\ufe0f\ud83d\udcd1"}),"\n",(0,s.jsx)(t.h4,{id:"commandoperations-dispatcher",children:"Command/operations Dispatcher"}),"\n",(0,s.jsx)(t.p,{children:"A command/operations dispatcher is a component that receives commands/operations and dispatches them to the appropriate handler. The implementation will include a command/operations dispatcher, which will enable developers to define command/operation handlers for the smart contract. \ud83d\ude9a\ud83d\udc68\u200d\u2708\ufe0f"}),"\n",(0,s.jsx)(t.h4,{id:"events-emitter",children:"Events Emitter"}),"\n",(0,s.jsx)(t.p,{children:"An events emitter is a component that emits events. The implementation will include an events emitter, which will enable developers to define event handlers for the smart contract. \ud83d\udce3\ud83d\udd0a"}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(t.p,{children:"The completion of this project will provide a powerful infrastructure for developers to build customized omnichain smart contracts on the Substrate framework. \ud83d\udcaa\ud83d\udc68\u200d\ud83d\udcbc"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://i.imgur.com/QsmzpZR.png",alt:"architecture"})}),"\n",(0,s.jsx)(t.h2,{id:"-technology-stack",children:"\ud83d\ude80 Technology Stack"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Programming Language"})," - Rust \ud83e\udd80"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Blockchain Framework"})," - Substrate \u26d3\ufe0f"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Virtual Machine"})," - WebAssembly (WASM) \ud83d\udd78\ufe0f"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Serialization"})," - Protocol Buffers (protobuf) \ud83d\udcdc: a language-agnostic data serialization format that allows for efficient and interoperable communication between different services and systems."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Design Patterns"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Event Sourcing \ud83d\udcdd: a pattern that captures all changes to an application state as a sequence of events, which can be used to reconstruct the state at any point in time."}),"\n",(0,s.jsx)(t.li,{children:"Command Query Responsibility Segregation (CQRS) \ud83e\uddec: a pattern that separates the read and write concerns of an application, using separate models and interfaces for each."}),"\n",(0,s.jsx)(t.li,{children:"Saga pattern \ud83c\udf1f: a pattern for coordinating distributed transactions across multiple services, ensuring consistency and reliability."}),"\n",(0,s.jsx)(t.li,{children:"Domain-Driven Design (DDD) \ud83c\udff0: a design approach that emphasizes the importance of the domain model in shaping the architecture of a software system."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Database"})," - MongoDB \ud83d\uddc4\ufe0f: a NoSQL document database that provides scalability, flexibility, and high availability."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Testing Framework"})," - Rust Testing \ud83e\uddea: Rust has an inbuilt testing framework that enables testing of units of code in isolation."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"CI/CD"})," - GitHub Actions \ud83d\ude80: a continuous integration and continuous deployment service that can automate the build and deployment processes."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Containerization"})," - Docker \ud83d\udc33: a tool that allows for the creation, deployment, and running of applications in containers, providing a consistent runtime environment across different platforms."]}),"\n",(0,s.jsx)(t.h1,{id:"documentation-for-core-copmpontents",children:"Documentation for Core Copmpontents"}),"\n",(0,s.jsx)(t.h1,{id:"dispatcher",children:"Dispatcher"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Dispatcher"})," is a component of the omnichain smart contract infrastructure that receives commands/operations and dispatches them to the appropriate handler. The ",(0,s.jsx)(t.code,{children:"Dispatcher"})," class enables developers to define command/operation handlers for the smart contract."]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Dispatcher"})," can be used in the implementation of the CQRS + Event Sourcing execution environment for Substrate framework. It receives commands/operations from external sources, such as a client or a node, and routes them to the appropriate command/operation handler."]}),"\n",(0,s.jsxs)(t.p,{children:["To use the ",(0,s.jsx)(t.code,{children:"Dispatcher"}),", developers first define a set of command/operation handlers for the smart contract. These handlers can be implemented as methods in a Rust struct. The ",(0,s.jsx)(t.code,{children:"Dispatcher"})," class then instantiates this struct and routes commands/operations to the appropriate method based on the type of command/operation."]}),"\n",(0,s.jsx)(t.h2,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Dispatcher"})," provides a simple and flexible way to handle commands/operations in the smart contract. By defining a set of command/operation handlers, developers can easily add new functionality to the smart contract without having to modify the ",(0,s.jsx)(t.code,{children:"Dispatcher"})," class itself."]}),"\n",(0,s.jsxs)(t.p,{children:["In addition, the ",(0,s.jsx)(t.code,{children:"Dispatcher"})," enables developers to implement complex business logic in the smart contract by routing commands/operations to the appropriate handler. This allows for a more modular and maintainable codebase."]}),"\n",(0,s.jsx)(t.h2,{id:"conclusion-1",children:"Conclusion"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Dispatcher"})," is a crucial component of the omnichain smart contract infrastructure. By enabling developers to define command/operation handlers for the smart contract, it provides a simple and flexible way to handle commands/operations. Its usage in the implementation of the CQRS + Event Sourcing execution environment for Substrate framework enables developers to implement complex business logic in a modular and maintainable codebase."]}),"\n",(0,s.jsx)(t.h1,{id:"eventstore",children:"EventStore"}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"EventStore"}),"  is a database that stores events in the order they occurred. It is a crucial component of the omnichain smart contract infrastructure support for Substrate framework. The ",(0,s.jsx)(t.code,{children:"EventStore"})," class enables the storage of all events generated by the smart contract, allowing for a complete historical record of all transactions and changes to the smart contract's state."]}),"\n",(0,s.jsx)(t.h2,{id:"implementation-1",children:"Implementation"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"EventStore"}),"  is implemented using an internal Substrate database. The ",(0,s.jsx)(t.code,{children:"EventStore"})," stores events in the form of serialized binary data plus metadata, which can be easily deserialized for querying and analysis."]}),"\n",(0,s.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"EventStore"}),"  includes the following features:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Event storage:"})," The ",(0,s.jsx)(t.code,{children:"EventStore"})," stores all events generated by the smart contract in the order they occurred, allowing for a complete historical record of all transactions and changes to the smart contract's state."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Querying:"})," The ",(0,s.jsx)(t.code,{children:"EventStore"})," allows for easy querying of events using various criteria, such as time range, event type, or specific parameters."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Deserialization:"})," The ",(0,s.jsx)(t.code,{children:"EventStore"})," can easily deserialize stored binary data for querying and analysis."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Scalability:"})," The ",(0,s.jsx)(t.code,{children:"EventStore"}),"  can handle large volumes of events and is designed for scalability."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"benefits-1",children:"Benefits"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"EventStore"})," provides several benefits to developers building smart contracts on the Substrate framework, including:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Transparency:"})," The ",(0,s.jsx)(t.code,{children:"EventStore"})," provides a complete historical record of all transactions and changes to the smart contract's state, ensuring transparency and accountability."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Auditability:"})," The ",(0,s.jsx)(t.code,{children:"EventStore"})," allows for easy querying and analysis of events, enabling developers to audit the smart contract's behavior and ensure compliance with regulations and business rules."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Flexibility:"})," The ",(0,s.jsx)(t.code,{children:"EventStore"})," can handle a wide range of event types and is designed for scalability, providing flexibility for developers building smart contracts on the Substrate framework."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"conclusion-2",children:"Conclusion"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"EventStore"})," is a crucial component of the omnichain smart contract infrastructure support for Substrate framework. It provides event storage, querying, deserialization, and scalability features, enabling developers to build transparent, auditable, and flexible smart contracts on the Substrate framework. The completion of this project will provide a powerful infrastructure for developers to build customized smart contracts on the Substrate framework, with the ",(0,s.jsx)(t.code,{children:"EventStore"})," serving as a key component of this infrastructure."]}),"\n",(0,s.jsx)(t.h1,{id:"snapshot-store",children:"Snapshot Store"}),"\n",(0,s.jsx)(t.h2,{id:"overview-1",children:"Overview"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Snapshot Store"})," is a component of the omnichain smart contract infrastructure that provides a way to store and retrieve snapshots of the smart contract state. A snapshot is a read-only view of the smart contract state at a particular point in time. Snapshots are useful for optimizing the performance of the smart contract by reducing the amount of data that needs to be read from the event store."]}),"\n",(0,s.jsx)(t.h2,{id:"implementation-2",children:"Implementation"}),"\n",(0,s.jsxs)(t.p,{children:["The implementation of the ",(0,s.jsx)(t.code,{children:"Snapshot Store"})," includes the following components:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Snapshot Store"}),": The Snapshot Store is the primary component. It provides an interface for storing and retrieving snapshots of the smart contract state."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Snapshot Index"}),": The Snapshot Index is a data structure that is used to index snapshots by their version. It allows for efficient retrieval of the latest snapshot."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Snapshot Writer"}),": The Snapshot Writer is a component that is used to write snapshots to the Snapshot Store. It receives the current state of the smart contract and writes it to the Snapshot Store as a snapshot."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Snapshot Reader"}),": The Snapshot Reader is a component that is used to read snapshots from the Snapshot Store. It receives a snapshot version and returns a read-only view of the smart contract state at that version."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"conclusion-3",children:"Conclusion"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Snapshot Store"})," provides a way to store and retrieve snapshots of the smart contract state, which can be used to optimize the performance of the smart contract. The implementation includes the ",(0,s.jsx)(t.code,{children:"Snapshot Store"}),", ",(0,s.jsx)(t.code,{children:"Snapshot Index"}),", ",(0,s.jsx)(t.code,{children:"Snapshot Writer"}),", and ",(0,s.jsx)(t.code,{children:"Snapshot Reader"})," components. The completion of this component will provide a pefrormance optmization for omnichain smart contracts on the Substrate framework."]}),"\n",(0,s.jsx)(t.h1,{id:"aggregate",children:"Aggregate"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Aggregate"})," is a core component of the CQRS + Event Sourcing design pattern. It represents the current state of an entity and is responsible for handling commands and producing events."]}),"\n",(0,s.jsx)(t.h2,{id:"description-1",children:"Description"}),"\n",(0,s.jsxs)(t.p,{children:["An ",(0,s.jsx)(t.code,{children:"Aggregate"})," is a stateful object that represents a single entity in the system. It maintains its state by applying events to its internal state. A new state can be generated by applying new events to the existing state."]}),"\n",(0,s.jsxs)(t.p,{children:["In the context of the Substrate framework, an ",(0,s.jsx)(t.code,{children:"Aggregate"})," is implemented as a Rust struct that contains its internal state and a set of methods to apply events and handle commands."]}),"\n",(0,s.jsx)(t.h2,{id:"implementation-3",children:"Implementation"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Aggregate"})," is implemented using the following components:"]}),"\n",(0,s.jsx)(t.h3,{id:"internal-state",children:"Internal state"}),"\n",(0,s.jsxs)(t.p,{children:["The internal state of an ",(0,s.jsx)(t.code,{children:"Aggregate"})," is represented as a Rust struct. The struct contains all the data necessary to represent the current state of the entity."]}),"\n",(0,s.jsx)(t.h3,{id:"command-handling",children:"Command handling"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Aggregate"})," contains a set of methods to handle commands. These methods accept a command object as input and return a set of events that represent the result of executing the command."]}),"\n",(0,s.jsx)(t.h3,{id:"event-sourcing",children:"Event sourcing"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Aggregate"})," implements event sourcing by maintaining a list of events that have been applied to the internal state. When a new command is received, the ",(0,s.jsx)(t.code,{children:"Aggregate"})," applies the appropriate events to generate a new state."]}),"\n",(0,s.jsx)(t.h3,{id:"snapshotting",children:"Snapshotting"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Aggregate"})," implements snapshotting by periodically storing a snapshot of its internal state. When an ",(0,s.jsx)(t.code,{children:"Aggregate"})," is retrieved from its event stream, it can be initialized with the latest snapshot and then apply only the events that occurred after the snapshot."]}),"\n",(0,s.jsx)(t.h2,{id:"conclusion-4",children:"Conclusion"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Aggregate"})," is a core component of the CQRS + Event Sourcing design pattern. It represents the current state of an entity and is responsible for handling commands and producing events. The implementation of the ",(0,s.jsx)(t.code,{children:"Aggregate"})," in the Substrate framework provides a powerful mechanism for building complex and scalable smart contracts."]}),"\n",(0,s.jsx)(t.h1,{id:"aggregatestate",children:"AggregateState"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"AggregateState"})," represents the state of an aggregate object in the event sourcing pattern. It is responsible for maintaining the current state of the aggregate object by processing the events that have occurred in the past."]}),"\n",(0,s.jsx)(t.h3,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"id"}),": The unique identifier of the aggregate object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"version"}),": The version of the aggregate object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"events"}),": The list of events that have occurred in the past."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"apply_event(event)"}),": Applies the given event to the current state of the aggregate object. This method updates the state of the aggregate object based on the event that occurred."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"get_version()"}),": Returns the version of the aggregate object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"get_events()"}),": Returns the list of events that have occurred in the past."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"usage-1",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["To use the ",(0,s.jsx)(t.code,{children:"AggregateState"})," , you must first create an instance of it and initialize it with the current state of the aggregate object. You can then apply events to the aggregate object by calling the ",(0,s.jsx)(t.code,{children:"apply_event()"})," method."]}),"\n",(0,s.jsx)(t.h2,{id:"diagramm",children:"Diagramm"}),"\n",(0,s.jsxs)(t.p,{children:["Architecture Overview Diagram\n",(0,s.jsx)(t.img,{src:"https://i.imgur.com/nWGtuEc.png",alt:"Diagramm"})]}),"\n",(0,s.jsx)(t.p,{children:"Flow Diagramm"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://i.imgur.com/1jeLNo1.png",alt:"Diagramm"})}),"\n",(0,s.jsx)(t.p,{children:"Command Processing Flow Diagramm"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:" +------------+       +------------+       +-----------------+       +-------------------+       +------------+\n | Application|       |   Router   |       | Execution Chain |       |  Event Relay Node |       | Aggregation|\n +------------+       +------------+       +-----------------+       +-------------------+       +------------+\n        |                    |                    |                            |                               |\n        |   Command Request  |                    |                            |                               |\n        |------------------\x3e|                    |                            |                               |\n        |                    |                    |                            |                               |\n        |   Command Handler  |                    |                            |                               |\n        |------------------\x3e|                    |                            |                               |\n        |                    |   Command Request   |                            |                               |\n        |                    |-------------------\x3e|                            |                               |\n        |                    |                    |  Execute Command (CQRS)    |                               |\n        |                    |                    |---------------------------\x3e|                               |\n        |                    |                    |                            |     Store Event (ES)         |\n        |                    |                    |                            |-----------------------------\x3e|\n        |                    |                    |                            |                               |\n        |                    |                    |                            |   Broadcast Event to        |\n        |                    |                    |                            |     Other Chains            |\n        |                    |                    |                            |---------------------------\x3e|\n        |                    |                    |                            |                               |\n        |                    |                    |                            |  Transmit Event to          |\n        |                    |                    |                            |     Aggregation Cluster     |\n        |                    |                    |                            |-----------------------------\x3e|\n        |                    |                    |                            |                               |\n        |                    |                    |                            |   Process Events and        |\n        |                    |                    |                            |     Produce Aggregated Data |\n        |                    |                    |                            |<-----------------------------|\n        |                    |                    |                            |                               |\n        |                    |                    |                            |     Return Aggregated Data  |\n        |                    |                    |                            |<-----------------------------|\n        |                    |                    |                            |                               |\n\n"})}),"\n",(0,s.jsx)(t.h1,{id:"api-documentation",children:"API Documentation"}),"\n",(0,s.jsx)(t.h2,{id:"domain",children:"Domain"}),"\n",(0,s.jsx)(t.h3,{id:"aggregate-1",children:"Aggregate"}),"\n",(0,s.jsx)(t.h4,{id:"aggregatestate-1",children:(0,s.jsx)(t.code,{children:"AggregateState"})}),"\n",(0,s.jsx)(t.h5,{id:"methods-1",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"new() -> Self"}),": Creates a new instance of ",(0,s.jsx)(t.code,{children:"AggregateState"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"apply_events(&mut self, events: Vec<DomainEvent>) -> Result<(), String>"}),": Applies a list of domain events to the aggregate state."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"clear(&mut self)"}),": Clears the state of the aggregate."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"domainevent",children:(0,s.jsx)(t.code,{children:"DomainEvent"})}),"\n",(0,s.jsx)(t.h5,{id:"methods-2",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"new(evnt_type: DomainEventType, evnt_payload: Vec<u8>) -> Self"}),": Creates a new instance of ",(0,s.jsx)(t.code,{children:"DomainEvent"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"serialize(&self) -> Result<Vec<u8>, String>"}),": Serializes the domain event to a byte array."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"domaineventtype",children:(0,s.jsx)(t.code,{children:"DomainEventType"})}),"\n",(0,s.jsx)(t.h5,{id:"variants",children:"Variants"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"NFT_MINTED"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"NFT_TRANSFERED"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"entities",children:"Entities"}),"\n",(0,s.jsx)(t.h4,{id:"nft",children:(0,s.jsx)(t.code,{children:"NFT"})}),"\n",(0,s.jsx)(t.h5,{id:"fields",children:"Fields"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"hash: [u8; 32]"}),": The unique hash of the NFT."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"owner: Address"}),": The address of the owner of the NFT."]}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"methods-3",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"new(hash: [u8; 32], owner: Address) -> Self"}),": Creates a new instance of ",(0,s.jsx)(t.code,{children:"NFT"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"get_hash(&self) -> [u8; 32]"}),": Returns the hash of the NFT."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"get_owner(&self) -> Address"}),": Returns the owner of the NFT."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"transfer(&mut self, new_owner: Address)"}),": Transfers the ownership of the NFT to a new owner."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"application",children:"Application"}),"\n",(0,s.jsx)(t.h3,{id:"command",children:"Command"}),"\n",(0,s.jsx)(t.h4,{id:"command-1",children:(0,s.jsx)(t.code,{children:"Command"})}),"\n",(0,s.jsx)(t.h5,{id:"fields-1",children:"Fields"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"cmd_type: CommandType"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"cmd_payload: Vec<u8>"})}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"methods-4",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"new(cmd_type: CommandType, cmd_payload: Vec<u8>) -> Self"}),": Creates a new instance of ",(0,s.jsx)(t.code,{children:"Command"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"serialize(&self) -> Result<Vec<u8>, String>"}),": Serializes the command to a byte array."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"commandtype",children:(0,s.jsx)(t.code,{children:"CommandType"})}),"\n",(0,s.jsx)(t.h5,{id:"variants-1",children:"Variants"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"MINT_NFT"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"TRANSFER_NFT"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"service",children:"Service"}),"\n",(0,s.jsx)(t.h4,{id:"commanddispatcher",children:(0,s.jsx)(t.code,{children:"CommandDispatcher"})}),"\n",(0,s.jsx)(t.h5,{id:"methods-5",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"dispatch(command: Command) -> Result<(), String>"}),": Dispatches a command to the appropriate handler."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"nftservice",children:(0,s.jsx)(t.code,{children:"NFTService"})}),"\n",(0,s.jsx)(t.h5,{id:"fields-2",children:"Fields"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"state: NFTsState"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"event_store: Box<dyn EventStore>"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"dispatcher: Box<dyn CommandDispatcher>"})}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"methods-6",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"new(state: NFTsState, event_store: Box<dyn EventStore>, dispatcher: Box<dyn CommandDispatcher>) -> Self"}),": Creates a new instance of ",(0,s.jsx)(t.code,{children:"NFTService"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"handle_command(&mut self, command: Command) -> Result<(), String>"}),": Handles a command by dispatching it to the appropriate handler."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"get_nft_owner(&self, hash: [u8; 32]) -> Option<Address>"}),": Returns the owner of an NFT with the given hash."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"event",children:"Event"}),"\n",(0,s.jsx)(t.h4,{id:"domaineventtype-1",children:(0,s.jsx)(t.code,{children:"DomainEventType"})}),"\n",(0,s.jsx)(t.h5,{id:"variants-2",children:"Variants"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"NFT_MINTED"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"NFT_TRANSFERED"})}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"domainevent-1",children:(0,s.jsx)(t.code,{children:"DomainEvent"})}),"\n",(0,s.jsx)(t.h5,{id:"fields-3",children:"Fields"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"evnt_type: DomainEventType"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"evnt_payload: Vec<u8>"})}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"methods-7",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"new(evnt_type: DomainEventType, evnt_payload: Vec<u8>) -> Self"}),": Creates a new instance of ",(0,s.jsx)(t.code,{children:"DomainEvent"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"serialize(&self) -> Result<Vec<u8>, String>"}),": Serializes the domain event to a byte array."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"store",children:"Store"}),"\n",(0,s.jsx)(t.h4,{id:"aggregaterepository",children:(0,s.jsx)(t.code,{children:"AggregateRepository"})}),"\n",(0,s.jsx)(t.h5,{id:"fields-4",children:"Fields"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"event_store: Box<dyn EventStore>"})}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"methods-8",children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"new(event_store: Box<dyn EventStore>) -> Self"}),": Creates a new instance of `AggregateRepository"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["\ud83c\udf1f ",(0,s.jsx)(t.strong,{children:"Ecosystem Fit:"})," \ud83c\udf1f"]}),"\n",(0,s.jsxs)(t.p,{children:["\ud83d\udd39 ",(0,s.jsx)(t.strong,{children:"Project's Fit:"})," CILA will provide an infrastructure for building efficient omnichain smart contracts that can be integrated into the Polkadot ecosystem, offering a unique solution in the Substrate/Polkadot/Kusama landscape."]}),"\n",(0,s.jsxs)(t.p,{children:["\ud83d\udd39 ",(0,s.jsx)(t.strong,{children:"Target Audience:"})," Developers interested in building omnichain smart contracts on Substrate, Polkadot, and Kusama, particularly those looking to develop cross-chain applications and interact with multiple blockchain networks."]}),"\n",(0,s.jsxs)(t.p,{children:["\ud83d\udd39 ",(0,s.jsx)(t.strong,{children:"Project's Purpose:"})," The infrastructure will enable developers to build more efficient and scalable omnichain smart contracts, making it easier to create cross-chain applications that interact with multiple blockchain networks. This will help solve the problem of siloed blockchains and allow developers to take advantage of the benefits of multiple chains."]}),"\n",(0,s.jsxs)(t.p,{children:["\ud83d\udd39 ",(0,s.jsx)(t.strong,{children:"Similar Projects:"})," We are not aware of any other projects similar to OmniChain in the Substrate/Polkadot/Kusama ecosystem, offering a unique solution for building omnichain smart contracts."]}),"\n",(0,s.jsx)(t.h2,{id:"team-",children:"Team \ud83e\uddbe"}),"\n",(0,s.jsx)(t.h3,{id:"team-members",children:"Team members"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\ud83d\udc68\u200d\ud83d\udcbb Alex Shkor - Architect, Developer, Team Lead"}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udc68\u200d\ud83d\udcbb Alexey Kulik - Architect, Developer"}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udc69\u200d\ud83d\udcbc Julia Shinkevich - Project Manager"}),"\n",(0,s.jsx)(t.li,{children:"\ud83e\uddd1\u200d\ud83d\udcbc Max Slyzkoukh - Product Manager"}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udc68\u200d\ud83d\udd27 Yahor Tsaryk - Engineer"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"contact",children:"Contact"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Contact Name:"})," Alex Shkor"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Contact Email:"})," ",(0,s.jsx)(t.a,{href:"mailto:alex@cilabs.ai",children:"alex@cilabs.ai"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Website:"})," ",(0,s.jsx)(t.a,{href:"https://collectiveintelligence.dev/",children:"https://collectiveintelligence.dev/"})]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"legal-structure",children:"Legal Structure"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Registered Address:"})," 16192 Coastal Highway, Lewes, DE 19958, United States."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Registered Legal Entity:"})," Collective Intelligence Labs Inc."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"teams-experience",children:"Team's experience"}),"\n",(0,s.jsxs)(t.p,{children:["Our team's extensive experience in blockchain development and past successful projects make us well-suited for this project. We have developed several blockchain-based platforms, including DeSci, which offers a decentralized scientific communication infrastructure, and IPledger, which registers intellectual property assets on the blockchain. We have also built a Proof of Share protocol for verification on a chain that specific files have been shared between parties, an on-chain grants distribution platform, a decentralized technology transfer platform, ",(0,s.jsx)(t.a,{href:"https://github.com/DEIPworld/deip-node/tree/develop/pallets/deip_f_nft",children:"F-NFT"})," and ",(0,s.jsx)(t.a,{href:"https://github.com/DEIPworld/deip-node/tree/develop/event-proxy",children:"Event Proxy"})," for Substrate, and other projects."]}),"\n",(0,s.jsx)(t.p,{children:"Our team members have also contributed to open-source blockchain projects, demonstrating our commitment to the development of the blockchain ecosystem as a whole."}),"\n",(0,s.jsx)(t.p,{children:"Our Team Lead is distributed systems architect and has over 14 years of experience in this field, with one of our team members being the inventor of omnichain smart-contracts protocol, which is an important aspect of this project. Our Software Engineer has over 10 years of experience in distributed systems engineering and was the ex-CTO at DEIP and the creator of the Economy Protocol. Our Tech Lead has experience in distributed system and blockchain R&D and was the ex-Head of R&D at Paralect, while also having experience as an ex-CPO at DEIP. Our Head of Marketing has 9 years of experience in PR and communications, having worked with micromobility and web3 startups. Our Product Manager expert in digital transformation has 6 years of experience in the procurement of 50+ leading private and state Ukrainian enterprises."}),"\n",(0,s.jsxs)(t.p,{children:["As a team, we have previously applied for a grant from the web3 foundation grants program for our DEIP project (DEIPWORLC Inc. legal entity). However, due to the constantly evolving market landscape and changing needs of the industry, we decided to pivot multiple times, and therefore did not deliver original proposal fully (only about 50% of it - onchain part). During the process we realized that on-chain IP management would not be possible without other infrastructure part. Therefore we decided to completely stop ",(0,s.jsx)(t.a,{href:"https://github.com/DEIPworld",children:"previous project"}),", change our focus and start working on a diferent solution, the core solution that will make possible to implement DEIP and other our projects that rely on omni-chain infrastructure and onchain IP management - omni-chain infrastructure"]}),"\n",(0,s.jsx)(t.p,{children:"We believe that being transparent about our previous application and pivot is important. We want to assure the committee that we are committed to delivering the proposed solution for our current application, and that we are passionate about creating value in the blockchain ecosystem."}),"\n",(0,s.jsx)(t.p,{children:"We are confident that our team's expertise and experience in developing distributed systems and infrastructure will enable us to successfully execute our proposed CILA omnichain infrastructure project. We believe that this infrastructure is crucial for the growth and adoption of blockchain technology, and we are excited about the opportunity to contribute to this space."}),"\n",(0,s.jsx)(t.h3,{id:"team-code-repos",children:"Team Code Repos"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/Collective-Intelligence-Labs",children:"https://github.com/Collective-Intelligence-Labs"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"team-github-profiles",children:"Team GitHub Profiles"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/alexshkor",children:"https://github.com/alexshkor"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/aliakseikulik",children:"https://github.com/aliakseikulik"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/yahortsaryk",children:"https://github.com/yahortsaryk"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/juliacil",children:"https://github.com/juliacil"})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"team-linkedin-profiles",children:"Team LinkedIn Profiles"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.linkedin.com/in/alexshkor/",children:"https://www.linkedin.com/in/alexshkor/"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.linkedin.com/in/alexeykulik/",children:"https://www.linkedin.com/in/alexeykulik/"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.linkedin.com/in/julia-shinkevich/",children:"https://www.linkedin.com/in/julia-shinkevich/"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.linkedin.com/in/max-slyzkouh/",children:"https://www.linkedin.com/in/max-slyzkouh/"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.linkedin.com/in/yahor-tsaryk-92032a68/",children:"https://www.linkedin.com/in/yahor-tsaryk-92032a68/"})}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"development-status-open_book",children:["Development Status ","\ud83d\udcd6"]}),"\n",(0,s.jsx)(t.p,{children:"CILA omnichain infrastructure for Substrate is currently in the research and planning phase. We have conducted extensive research on the existing smart contract infrastructure and identified the need for an omnichain smart contract solution. Our team has also analyzed the capabilities of the Substrate/Polkadot/Kusama ecosystem and determined that it is the ideal platform for building this solution."}),"\n",(0,s.jsx)(t.p,{children:"We have created a detailed project plan that outlines the development roadmap and milestones. This plan includes research and development of the necessary components."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Draft of solidity implementation: ",(0,s.jsx)(t.a,{href:"https://github.com/Collective-Intelligence-Labs/cila-sol-contracts",children:"https://github.com/Collective-Intelligence-Labs/cila-sol-contracts"})]}),"\n",(0,s.jsxs)(t.li,{children:["Vision Paper: ",(0,s.jsx)(t.a,{href:"https://docsend.com/view/eqt2iazwmff3jikh",children:"https://docsend.com/view/eqt2iazwmff3jikh"})]}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"development-roadmap-nut_and_bolt",children:["Development Roadmap ","\ud83d\udd29"]}),"\n",(0,s.jsx)(t.h3,{id:"overview-2",children:"Overview"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Total Estimated Duration:"})," 3 months"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Full-Time Equivalent (FTE):"})," 2 FTE"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Total Costs:"})," 30,000 USD"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"milestone-1--design-and-implementation",children:"Milestone 1 \u2014 Design and Implementation"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Estimated duration:"})," 1 month"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"FTE:"}),"  2"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Costs:"})," 10,000 USD"]}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Number"}),(0,s.jsx)(t.th,{children:"Deliverable"}),(0,s.jsx)(t.th,{children:"Specification"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0a."})}),(0,s.jsx)(t.td,{children:"License"}),(0,s.jsx)(t.td,{children:"Apache 2.0"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0b."})}),(0,s.jsx)(t.td,{children:"Documentation"}),(0,s.jsx)(t.td,{children:"We will ensure comprehensive documentation of the code by providing both inline comments and a step-by-step tutorial. This tutorial will guide the user through spinning up a Substrate-based execution environment for the CILA Omnichain Infrastructure and testing omnichain transactions, showcasing the new functionality."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0c."})}),(0,s.jsx)(t.td,{children:"Testing and Testing Guide"}),(0,s.jsx)(t.td,{children:"We will conduct comprehensive unit testing on the core functionalities including Aggregate, Event Store, Aggregate Repository, Snapshot Store, and Dispatcher, to ensure optimum functionality and robustness. The testing guide will contain instructions on how to execute these tests."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0d."})}),(0,s.jsx)(t.td,{children:"Docker"}),(0,s.jsx)(t.td,{children:"We will deliver Dockerfiles for testing all the functionality included in this milestone."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"1."}),(0,s.jsx)(t.td,{children:"Substrate module: Aggregate"}),(0,s.jsx)(t.td,{children:"The Aggregate pallet provides the base functionality for implementing the Command Query Responsibility Segregation (CQRS) pattern on a Substrate-based blockchain. It defines the Aggregate trait, which is used to define the state and behavior of an Aggregate."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"2."}),(0,s.jsx)(t.td,{children:"Substrate module: AggregateState"}),(0,s.jsx)(t.td,{children:"The AggregateState pallet provides a default implementation of the AggregateState trait, which stores the current state of an Aggregate in the blockchain's storage. This pallet is responsible for managing the state of an Aggregate and updating it based on incoming commands."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"3."}),(0,s.jsx)(t.td,{children:"Substrate module: AggregateRepository"}),(0,s.jsx)(t.td,{children:"The AggregateRepository pallet provides an implementation of the AggregateRepository trait, which is responsible for retrieving and storing Aggregates in the blockchain's storage. It allows developers to easily store and retrieve Aggregates from the blockchain's storage."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"4."}),(0,s.jsx)(t.td,{children:"Substrate module: CommandDispatcher"}),(0,s.jsx)(t.td,{children:"The CommandDispatcher pallet provides a way to dispatch incoming commands to the appropriate Aggregates based on their type. It uses a HashMap to store the mapping between command types and the Aggregates that handle them."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"5."}),(0,s.jsx)(t.td,{children:"Substrate module: EventStore"}),(0,s.jsx)(t.td,{children:"The EventStore pallet provides a way to store and retrieve events that have been emitted by Aggregates. It allows developers to easily retrieve the events emitted by a specific Aggregate and replay them to reconstruct the current state of the Aggregate."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"6."}),(0,s.jsx)(t.td,{children:"Substrate module: EventsEmitter"}),(0,s.jsx)(t.td,{children:"The EventsEmitter pallet provides a way for Aggregates to emit events. It defines a trait that Aggregates can implement to specify the types of events they emit, and provides a way to subscribe to events emitted by specific Aggregates."})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"milestone-2--testing-and-documentation",children:"Milestone 2 \u2014 Testing and Documentation"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Estimated duration:"})," 1 month"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"FTE:"}),"  2"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Costs:"})," 10,000 USD"]}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Number"}),(0,s.jsx)(t.th,{children:"Deliverable"}),(0,s.jsx)(t.th,{children:"Specification"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0a."})}),(0,s.jsx)(t.td,{children:"License"}),(0,s.jsx)(t.td,{children:"Apache 2.0"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0b."})}),(0,s.jsx)(t.td,{children:"Documentation"}),(0,s.jsx)(t.td,{children:"We will ensure comprehensive documentation of the code by providing both inline comments and a step-by-step tutorial. This tutorial will guide the user through spinning up a Substrate-based execution environment for the CILA Omnichain Infrastructure and testing omnichain transactions, showcasing the new functionality. Special attention will be given to documenting the setup and testing of multiple Substrate chains running simultaneously, to test the synchronization of the state smart contract between them."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0c."})}),(0,s.jsx)(t.td,{children:"Testing and Testing Guide"}),(0,s.jsx)(t.td,{children:"We will conduct comprehensive unit testing on the core functionalities including Aggregate, Event Store, Aggregate Repository, Snapshot Store, and Dispatcher, to ensure optimum functionality and robustness. In particular, we will place emphasis on testing the infrastructure running with multiple chains to ensure that the synchronization mechanism is functioning as intended. The testing guide will contain instructions on how to execute these tests."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0d."})}),(0,s.jsx)(t.td,{children:"Docker"}),(0,s.jsx)(t.td,{children:"We will deliver Dockerfiles for testing all the functionality included in this milestone, including orchestration with multiple chains. For orchestration purposes we might use Kubernates."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"0e."}),(0,s.jsx)(t.td,{children:"Article"}),(0,s.jsx)(t.td,{children:"We will publish a technical article that details the implementation of the Command-Query Responsibility Segregation (CQRS) and Event Sourcing architecture on the Substrate framework. The article will provide an in-depth explanation of the design choices made and the challenges faced during the implementation. It will also include a detailed walkthrough of the codebase, highlighting key areas of interest and how they fit into the overall architecture. The article will be written in a technical language that targets developers with experience in blockchain and distributed systems."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"1."}),(0,s.jsx)(t.td,{children:"Substrate chain"}),(0,s.jsx)(t.td,{children:"Set up and run multiple Substrate chains simultaneously to test the synchronization of a state smart contract between them. This will involve deploying the omnichain smart contract infrastructure to each chain and executing transactions on each chain to ensure that the contract state is properly synchronized between them. Additionally, various network conditions such as network latency and node failures will be simulated to test the robustness and reliability of the synchronization mechanism. The results of these tests will be recorded and analyzed to identify any potential issues and ensure that the synchronization mechanism is functioning as intended."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"2."}),(0,s.jsx)(t.td,{children:"Automated Tests"}),(0,s.jsx)(t.td,{children:"We will create and publish automated tests for critical infrastructure parts of Substrate-based CQRS + Event Sourcing execution enviroment. The aim of this test will be to test two cases - non conflicting execution (changes coming to one chain and transmitted to the other one), and conflicting transactions when the same aggregate is updated with two conflicing state changes that simuntaniusly come to different chans."})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"milestone-3--example-smart-contracts-and-enhancements",children:"Milestone 3 \u2014 Example Smart Contracts and Enhancements"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Estimated duration:"})," 1 month"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"FTE:"}),"  2"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Costs:"})," 10,000 USD"]}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"right"},children:"Number"}),(0,s.jsx)(t.th,{children:"Deliverable"}),(0,s.jsx)(t.th,{children:"Specification"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0a."})}),(0,s.jsx)(t.td,{children:"License"}),(0,s.jsx)(t.td,{children:"Apache 2.0"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0b."})}),(0,s.jsx)(t.td,{children:"Documentation"}),(0,s.jsx)(t.td,{children:"Provide inline documentation of the NFTAggregate pallet and NFTAggregateState pallet code, as well as a basic tutorial that explains how a user can set up a Substrate node and send test transactions to test the NFT functionalities provided by these modules. Additionally, comprehensive unit tests will be developed and documented to ensure the functionality and robustness of the NFTAggregate pallet and NFTAggregateState pallet. A testing guide will also be provided, describing how to run the tests."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0c."})}),(0,s.jsx)(t.td,{children:"Testing and Testing Guide"}),(0,s.jsx)(t.td,{children:"For this milestone, we will develop comprehensive unit tests to cover the core functions of the NFTAggregate module and the NFTAggregateState pallet. These tests will be designed to ensure the functionality and robustness of the code. The unit tests will be included in the code repository and will cover a range of scenarios to ensure that the code is thoroughly tested. For example, we will test the minting, burning, and transferring of NFTs, as well as error handling and edge cases. In the testing guide, we will provide detailed instructions on how to run these tests, including any required dependencies and setup steps. We will also include information on how to interpret the test results and what to do in the case of failures or errors.."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:(0,s.jsx)(t.strong,{children:"0d."})}),(0,s.jsx)(t.td,{children:"Docker"}),(0,s.jsx)(t.td,{children:"In order to facilitate testing and deployment of the NFTAggregate pallet and NFTAggregateState pallet, we will provide Dockerfiles that can be used to easily set up and configure a development environment. These Dockerfiles will include all the necessary dependencies and configuration to run the Substrate-based blockchain with the new functionalities."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"1."}),(0,s.jsx)(t.td,{children:"Substrate module: NFTAggregate"}),(0,s.jsx)(t.td,{children:"The NFTAggregate pallet provides a way to implement Non-Fungible Tokens (NFTs) on a Substrate-based blockchain. It defines a trait that NFT Aggregates can implement to specify the behavior of NFTs, including minting, burning, and transferring."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"2."}),(0,s.jsx)(t.td,{children:"Substrate module: NFTAggregateState"}),(0,s.jsx)(t.td,{children:"The NFTAggregateState pallet provides a default implementation of the state of an NFT Aggregate, which stores the current state of NFTs in the blockchain's storage. This pallet is responsible for managing the state of NFTs and updating it based on incoming commands."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"right"},children:"3."}),(0,s.jsx)(t.td,{children:"Report: Substrate Ecosystem NFT standards"}),(0,s.jsxs)(t.td,{children:["To choose the most optimal standard for omnichain implementation we will conduct research and assess all the available NFT standards against two major criteria: popularity and technical quality. Popularity will be measured by the number of stars on the GitHub repository and how many projects are actually using it (usage assesment will be done on a best effort basis), and the technical quality will be assessed by analyzing if a specific standard satisfies ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/SOLID",children:"SOLID"})," design principles."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"future-plans",children:"Future Plans"}),"\n",(0,s.jsx)(t.p,{children:"In the short term, we plan to continue to develop and enhance our project to ensure its success and sustainability. This will include ongoing testing, bug fixes, and implementing additional features and improvements as needed. We will actively promote our project through various channels, including social media, blog posts, and community events."}),"\n",(0,s.jsx)(t.p,{children:"After the completion of the proposed infrastructure, we intend to continue its development by incorporating support for multiple blockchains and introducing more advanced functionalities, such as dynamic rebalancing for aggregates. Additionally, we plan to establish partnerships with leading players in the Substrate/Polkadot/Kusama ecosystem and to integrate our omnichain infrastructure with existing projects, such as DeFi and NFT marketplaces, to further increase adoption. Finally, we will provide comprehensive documentation and support to ensure that our infrastructure is accessible and user-friendly for developers and users alike."}),"\n",(0,s.jsx)(t.p,{children:"In the long term, we envision our project becoming a leading platform for event-centric CQRS + Event Sourcing execution environments and omnichain smart contracts on the Substrate blockchain. We plan to expand our team and further invest in research and development to stay ahead of the curve and meet the needs of the rapidly evolving blockchain industry. We will continue to engage with the community and seek feedback to ensure that our project remains relevant and valuable to users. Our ultimate goal is to create a platform that is widely adopted and helps to drive the mainstream adoption of blockchain technology."}),"\n",(0,s.jsxs)(t.h2,{id:"additional-information-heavy_plus_sign",children:["Additional Information ","\u2795"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://i.imgur.com/WZt1hdx.png",alt:"mission"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"How did you hear about the Grants Program?"})," personal recommendation"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);